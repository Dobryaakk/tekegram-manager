import random
import re
import asyncio

from aiogram import types, Dispatcher
from antiflood import rate_limit
from aiogram.types import ParseMode

from database.db import Database_rules, Database_group, Database_group_words, Database_pred_user, \
    Database_user_all, Database_group_bad_words, Database_group_words_day, Database_group_bad_words_day, Database_pred
from keyboard import keyboard_client

db_rules = Database_rules('bd.db')
db_group = Database_group('bd.db')
db_words = Database_group_words('bd.db')
db_pred_user = Database_pred_user('bd.db')
db_add_user = Database_user_all('bd.db')
db_add_bad = Database_group_bad_words('bd.db')
db_add_day = Database_group_words_day('bd.db')
db_bad_day = Database_group_bad_words_day('bd.db')
db_pred = Database_pred('bd.db')

pis = """–æ–π –ª–µ—Ç–∏–ª—ã –¥—ã–∫–∏ –≥—É—Å—ã
–Ω–∞–ª—ã—Å–Ω–∏–∫–∏ –∑ –º–∞–∫–æ–º
–∫–æ—Ä–æ–≤–∞ –ø–∞—Å–µ—Ü—è
–ø–∏–ª—å–º–µ–Ω–∏ —Å –º—è—Å–∞–º
–∞ –º–∏ –∫–∞—à—É –Ω–µ –¥–æ–∏–ª—ã
–∫–æ—Ü–± –¥–µ—Ä–µ–≤—è–Ω–∏
—Ü–µ–ø –∑–ª–µ—Ç–∏–≤ –∑ –≤–µ–ª–æ—Å—ã–ø–µ–¥–∞
–±–∞–±–∞ —Å–ø—ã—Ç—å —É —è–º–∏
–ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏
—Ä–∞–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏
–≤—ã—à–Ω–∏ —á–µ—Ä–µ—à–Ω–∏ —Å–ª—ã–≤–∫–∏
–Ω–∞–¥–∏–Ω—å—Ç–µ –º—É—Ä–∞—à—Ü–∏ —Ñ—É—Ä–∞—à–∫—É
–æ–π –ª–µ—Ç–∏–ª—ã –¥—ã–∫–∏ –≥—É—Å—ã
–¥–∏–¥ –±–∏–∂—ã—Ç—å –∑ –º–µ—Ç–ª–æ—é
–Ω–∞ –¥–æ—Ä–æ–∑–∏ –ª–µ–∂–∏—Ç—å –∫—É–ø–∞
–º–∏—à–æ–∫ –∑ —Ç—Ä–∞–≤–æ—é
–≤ –∑—É–±–∏ –∑–∞—Å—Ç—Ä—è–ª–∞ –∫–∞—Ä—Ç–æ–ø–ª—ã–Ω–∞
—Ä–∏–∂–µ –±–∞—Ç—å–∫–æ –¥—Ä–æ–≤–∞
–ø–∏–≤ –º–∏—à–∫–∞ –≤–∏–¥—Ä–∞ –≥–æ—Ä–æ—Ö—É
–≤—ã—Å—Ä–∞–ª–∞—Å—å –∫–æ—Ä–æ–≤–∞
–ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏
—Ä–∞–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏
–≤—ã—à–Ω–∏ —á–µ—Ä–µ—à–Ω–∏ —Å–ª—ã–≤–∫–∏
–Ω–∞–¥–∏–Ω—å—Ç–µ –º—É—Ä–∞—à—Ü–∏ —Ñ—É—Ä–∞—à–∫—É
–æ–π –ª–µ—Ç–∏–ª—ã –¥–∏–∫–∏ –≥—É—Å—ã
–ø–∞–ª–∞—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–ª–∞
—Å–≤–∏—á–∫–∞ —Å–≤–∏—Ç–µ —Ç–∞ –Ω–µ –≥—Ä–∏–µ
—Å–æ–±–∞–∫–∞ –∑–¥–æ—Ö–ª–∞
–ø–∏–¥ –¥–æ—â–µ–º –≤—ã—Å–æ—Ö–ª–æ —Å–∏–Ω–æ
–¥–µ—Ä–µ–≤–∞ —Ç—Ä—è—Å—É—Ç—å—Å—è
–±—É—Ä—è–∫–∏ –ø–æ–∑–∞–±—É–≤–∞–ª—ã
–∞ —Å–≤—ã–Ω–∏ –Ω–µ—Å—É—Ç—Å—è
–ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏ –ª–∞—Å—Ç–∏–≤–∫–∏
—Ä–∞–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏ —Ä–æ–º–∞—à–∫–∏
–≤—ã—à–Ω–∏ —á–µ—Ä–µ—à–Ω–∏ —Å–ª—ã–≤–∫–∏
–Ω–∞–¥–∏–Ω—å—Ç–µ –º—É—Ä–∞—à—Ü–∏ —Ñ—É—Ä–∞—à–∫—É
–æ–π –ª–µ—Ç–∏–ª—ã –¥—ã–∫—ã –≥—É—Å—ã
—Ç–∞–π –Ω–µ –¥–æ–ª–µ—Ç–∏–ª—ã
–±–∞–Ω—á–∫ –∫—Ä—ã—à–∫–æ—é –Ω–∞–∫—Ä—ã—Ç—ã–π
–∞ –¥—Ä–æ–≤–∞ –∑–≥–æ—Ä–∏–ª—ã
–Ω–∞ –ø–æ–¥–≤—Ä–∏ –±–∞–±–∞ –≥–∞–ª—è
–º–æ—Ç–æ—Ü–∏–∫–ª —Å–∫—Ä–∞—é
–∞—Å—Ñ–∞–ª—å—Ç —Ö–æ—Ä–æ—à–∏–π
–¥–∞–ª—å—à–µ —è –Ω–µ –∑–Ω–∞—é
"""


async def song(message: types.Message):
    for line in pis.splitlines():
        print(message.text)  # –î–æ–¥–∞–π—Ç–µ —Ü–µ–π —Ä—è–¥–æ–∫ –¥–ª—è –≤—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
        if message.text == 'stop':  # –ó–∞–º—ñ–Ω—ñ—Ç—å "–∏" –Ω–∞ "—ñ" —Ç—É—Ç
            return
        await message.answer(line, parse_mode=ParseMode.MARKDOWN)
        await asyncio.sleep(1)



@rate_limit(limit=2)
async def dobryak(message: types.Message):
    if message.from_user.id == 1280899097:
        await message.answer("–®–æ —Ö–∞–∑–∞—è–∏–Ω, –∑–≤–∞–ª?")
        await message.answer_sticker(sticker='CAACAgIAAxkBAAEBYsVlJVj-aUd_FhREdp31BVMJlsqw3gAC6B8AAltwqUo_tyeq6zPpmzAE')
    else:
        await message.reply("–Ø–∑—ã–∫ —á—É—Ä–∫—Å–∫–∏–π —Ç–≤–æ–π –Ω–µ –ø–æ–Ω–∏–º–∞—é")


@rate_limit(limit=2)
async def here(message: types.Message):
    await message.answer("–ê —Ç–∞–±–µ —ç—Ç–æ –µ–±–∞—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ")
    await message.answer_sticker(sticker='CAACAgIAAxkBAAEBYsVlJVj-aUd_FhREdp31BVMJlsqw3gAC6B8AAltwqUo_tyeq6zPpmzAE')


@rate_limit(limit=2)
async def say(message: types.Message):
    if message.from_user.id == 1280899097:
        await message.answer(message.text[13:])
    else:
        await message.answer("—è —à–æ —Ç–∞–±–µ —Å–æ–±–∞–∫–∞ –∫–∞–∫–∞—è—Ç–æ —à–æ–± –ø–æ–¥—á–∏–Ω—è—Ç—å—Å—è —Ç–∞–±–µ")
        await message.answer_sticker(sticker='CAACAgIAAxkBAAEBYsVlJVj-aUd_FhREdp31BVMJlsqw3gAC6B8AAltwqUo_tyeq6zPpmzAE')


@rate_limit(limit=2)
async def bot(message: types.Message):
    await message.answer("—è –≤–æ–ø—à–µ—Ç–æ –º–æ–≤–ø")
    await message.answer_sticker(sticker='CAACAgIAAxkBAAEBYsVlJVj-aUd_FhREdp31BVMJlsqw3gAC6B8AAltwqUo_tyeq6zPpmzAE')



@rate_limit(limit=2)
async def start(message: types.Message):
    if message.chat.type == types.ChatType.PRIVATE:
        await message.answer(
            """
           <b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n
–Ø <i>—á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä</i>, —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏. –ú–æ—è —Ü–µ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ª–µ–≥–∫–æ –∏ —É–¥–æ–±–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç–∞—Ö. üöÄ\n\n
–ß—Ç–æ–±—ã <i>–¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —á–∞—Ç</i>, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —É–ª—É—á—à–∏—Ç—å –æ–ø—ã—Ç –æ–±—â–µ–Ω–∏—è –≤–∞—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!‚¨áÔ∏è\n\n
 """,
            reply_markup=keyboard_client.button_add_start(), parse_mode="HTML")
    elif message.chat.type in [types.ChatType.GROUP, types.ChatType.SUPERGROUP]:
        if db_group.is_group_id_present(message.chat.id) == False:
            db_group.add_group_id(message.chat.id)
            await message.answer("""
<b>–Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä</b> ü§ñ. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n<code>/config</code>.
""", parse_mode="HTML")
        await message.answer("""
<b>–Ø —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä</b> ü§ñ. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n<code>/config</code>.
""", parse_mode="HTML")


@rate_limit(limit=2)
async def comand_list(message: types.Message):
    await message.answer("https://teletype.in/@dobrychek/q3QWyxkYax-", disable_web_page_preview=True)


@rate_limit(limit=2)
async def delete(message: types.Message):
    if db_rules.delete_rules(message.chat.id):
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
    else:
        await message.answer("""
<b>‚ùó –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/config</code> ‚öôÔ∏è.""", parse_mode='HTML')


@rate_limit(limit=2)
async def rules(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        if db_rules.get_rules(message.chat.id) == '–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã':
            await message.reply("""
<b>‚ùó –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>. –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/config</code> ‚öôÔ∏è.
""", parse_mode='HTML')
        else:
            await message.answer(f'<b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b> üìú\n\n{db_rules.get_rules(message.chat.id)}', parse_mode='HTML')


@rate_limit(limit=2)
async def config(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        await message.answer("<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ‚öôÔ∏è</b>", reply_markup=keyboard_client.setting_menu(), parse_mode='HTML')


import html


@rate_limit(limit=2)
async def top_boltunov(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        da = db_words.get_group_messages(message.chat.id)
        da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

        messages = []
        # Loop through the first 30 items in da_sorted list
        for user_id, name, message_count in da_sorted[:30]:
            if db_words.get_group_messages(user_id) is not None:
                # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                name_escaped = html.escape(name)
                messages.append(f"<i>{name_escaped}</i> - <b>{message_count}</b>")

        group_message = "\n".join(messages)
        total_message_count = db_words.get_total_message_count_for_group(message.chat.id)
        # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        total_message_count_escaped = html.escape(str(total_message_count))
        await message.answer(
            f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_message_count_escaped}</b>",
            parse_mode='HTML')




@rate_limit(limit=2)
async def top_pizdabol(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_add_bad.get_group_messages(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_add_bad.get_group_messages(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_message_count_escaped = html.escape(str(db_add_bad.get_total_message_count_for_group(message.chat.id)))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_message_count_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")


@rate_limit(limit=2)
async def top_pizdabol_day(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_bad_day.get_top_messages_last_24_hours(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_bad_day.get_top_messages_last_24_hours(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")



@rate_limit(limit=2)
async def top_pizdabol_week(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_bad_day.get_top_messages_last_week(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_bad_day.get_top_messages_last_week(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")


@rate_limit(limit=2)
async def top_pizdabol_month(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_bad_day.get_top_messages_last_month(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_bad_day.get_top_messages_last_month(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")



@rate_limit(limit=2)
async def top_group_day(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_add_day.get_top_messages_last_24_hours(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_add_day.get_top_messages_last_24_hours(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")



@rate_limit(limit=2)
async def top_group_week(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_add_day.get_top_messages_last_week(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_add_day.get_top_messages_last_week(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")



@rate_limit(limit=2)
async def top_group_month(message: types.Message):
    try:
        if message.chat.type != types.ChatType.PRIVATE:
            da = db_add_day.get_top_messages_last_month(message.chat.id)
            da_sorted = sorted(da, key=lambda item: item[2], reverse=True)

            messages = []
            total_messages = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

            # Loop through the first 30 items in da_sorted list
            for user_id, name, message_count in da_sorted[:30]:
                if db_add_day.get_top_messages_last_month(user_id) is not None:
                    # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É —Ç–µ–∫—Å—Ç—ñ —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                    name_escaped = html.escape(name)
                    message_count_escaped = html.escape(str(message_count))
                    messages.append(f"{name_escaped} - {message_count_escaped}")
                    total_messages += message_count

            group_message = "\n".join(messages)
            # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ HTML —É –∑–∞–≥–∞–ª—å–Ω—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            total_messages_escaped = html.escape(str(total_messages))
            await message.answer(
                f"{group_message}\n\n<i>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</i> - <b>{total_messages_escaped}</b>",
                parse_mode='HTML')
    except Exception:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")



@rate_limit(limit=2)
async def top_eblanov(message):
    if message.chat.type != types.ChatType.PRIVATE:
        da = db_pred_user.get_group_messages_pred(message.chat.id)
        da_sorted = sorted(da, key=lambda item: item[2], reverse=True)
        messages = [f"<a href='tg://user?id={user_id}'>{name}</a> - {message_count}/{db_pred.get_default_pred_value()}"
                    for
                    user_id, name, message_count in
                    da_sorted if
                    db_pred_user.get_group_messages_pred(user_id) is not None]
        group_message = "\n".join(messages)
        return group_message


# async def profile(message: types.Message):
#     user_id, name, time = db_add_user.get_random_user_with_name_from_table()
#     telegram_user_id = message.from_user.id
#     user_profile_photos = await bot.get_user_profile_photos(user_id=telegram_user_id)
#
#     if user_profile_photos.total_count > 0:
#         photo = user_profile_photos.photos[0][-1]
#         file_id = photo.file_id
#
#         await bot.send_photo(message.chat.id, photo=file_id,
#                         caption=f"–ü—Ä–æ—Ñ–∏–∏–ª—å <a href='tg://user?id={telegram_user_id}'>{message.from_user.full_name}</a>\n"
#                          f"–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ {time[:10]}"
#                          f"–°—Ç–∞—Ç—å: {}", parse_mode='HTML')

@rate_limit(limit=2)
async def danet(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        if message.text.startswith(".–¥–∞–Ω–µ—Ç"):
            user_id, name = db_group.get_random_user_with_name_from_user_messages_table(message.from_user.id)
            danet = [
                'üîç <b>–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ, –≤ —ç—Ç–æ–º –Ω–µ—Ç —Å–æ–º–Ω–µ–Ω–∏–π!</b>',
                '‚öñÔ∏è <b>–î–∞, –∫–æ–Ω–µ—á–Ω–æ, —ç—Ç–æ –∫–∞–∫ –¥–≤–∞–∂–¥—ã –¥–≤–∞ –ø—è—Ç—å.</b>',
                '‚ùì <b>–Ø –±—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ –¥–∞, –Ω–æ –Ω–µ —Å–∫–∞–∂—É.</b>',
                'üëÄ <b>–≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ.</b>',
                'üîÆ <b>–ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–∞–≤–¥—É.</b>',
                'üîç <b>–°–æ–º–Ω–µ–≤–∞—é—Å—å, –Ω–æ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —à–∞–Ω—Å.</b>',
                '‚öñÔ∏è <b>–î–∞, –Ω–æ —Å –Ω—é–∞–Ω—Å–∞–º–∏.</b>',
                '‚ùì <b>–û—Ç–≤–µ—Ç —Å–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç.</b>',
                'üëÄ <b>–°–º–æ—Ç—Ä—è –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–æ —Å–∫–æ—Ä–µ–µ –¥–∞.</b>',
                'üîÆ <b>–ù–µ –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.</b>',
                'üîç <b>–ù–µ —Å—Ç–æ–∏—Ç –Ω–∞ —ç—Ç–æ –Ω–∞–¥–µ—è—Ç—å—Å—è.</b>',
                '‚öñÔ∏è <b>–Ø –Ω–µ –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ.</b>',
                '‚ùì <b>–°–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å.</b>',
                'üëÄ <b>–ù–µ –≤–∏–∂—É –ø—Ä–∏—á–∏–Ω –¥–ª—è —Å–æ–º–Ω–µ–Ω–∏–π.</b>',
                'üîÆ <b>–°–ø–æ—Ä–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ.</b>',
                'üîç <b>–ù—É, —Å–∫–æ—Ä–µ–µ –Ω–µ—Ç, —á–µ–º –¥–∞.</b>',
                '‚öñÔ∏è <b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –¥—É–º–∞—é...</b>',
                '‚ùì <b>–ü–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏, –¥–∞.</b>',
                'üëÄ <b>–≠—Ç–æ –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω–æ.</b>',
                'üîÆ <b>–í–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –Ω–µ —Ñ–∞–∫—Ç.</b>',
                'üîç <b>–Ø –±—ã —Å–∫–∞–∑–∞–ª - –¥–∞, –Ω–æ...</b>',
                '‚öñÔ∏è <b>–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ.</b>',
                '‚ùì <b>–ù–∞–≤–µ—Ä–Ω–æ–µ, –Ω–µ—Ç.</b>',
                'üëÄ <b>–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –¥–∞.</b>',
                f"üîÆ <b>–°–ø—Ä–æ—Å–∏ —É <a href='tg://user?id={user_id}'>{name}</a>.</b>",
                f"üîç <b>–Ø —É–≤–µ—Ä–µ–Ω, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç.</b>"
            ]
            await message.answer(
                f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a> {random.choice(danet)}",
                parse_mode="HTML")


@rate_limit(limit=2)
async def who(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        words_after_bot_kto = message.text[7:]
        user_id, name = db_group.random_user_with_name_from_user_messages_table()
        who = [
            f"–Ø –¥—É–º–∞—é —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}"
            f"–õ–µ–≥–µ–Ω–¥–∞ –≥–ª–∞—Å–∏—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ú–æ–π –∫–æ—Ç –¥—É–º–∞–µ—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ü–æ –≤—Å–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–°–ª—É—Ö–∏ —É—Ç–≤–µ—Ä–∂–¥–∞—é—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–°–æ–≥–ª–∞—Å–Ω–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ó–∞–≥–∞–¥–æ—á–Ω—ã–π –º–∏—Ä –±–æ—Ç–æ–≤ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ú–æ–∏ –±–æ—Ç—ã-–∫–æ–ª–ª–µ–≥–∏ —É—Ç–≤–µ—Ä–∂–¥–∞—é—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ú–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–Ø—Å–Ω–æ –≤–∏–∂—É, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}",
            f"–ù—É —Ç—É—Ç –¥–∞–∂–µ –º–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ <a href='tg://user?id={user_id}'>{name}</a> {words_after_bot_kto}"
        ]
        await message.answer(
            f"{random.choice(who)}",
            parse_mode="HTML")


@rate_limit(limit=2)
async def infa(message: types.Message):
    if message.chat.type != types.ChatType.PRIVATE:
        await message.answer(
            f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>"
            f" –°—É–¥—è –ø–æ –¥–∞–Ω–Ω—ã–º, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {random.randint(0, 100)}%.",
            parse_mode="HTML")


async def user_all(message: types.Message):
    mat = [
        '—Å—É–∫–æ',
        '—Ç–≤–æ—Ä',
        '—Ç–≤–∞—Ä',
        '–±–ª—è–¥',
        '–∫–∞–∫–∞—à–∫–∞',
        '–ø–∏–∑–¥–µ—Ü',
        '–ø–∏—Å–¥–µ—Ü',
        '–±–ª—è—Ç',
        '–±–∏–ª—è—Ç',
        '–±–∏–ª—è',
        '–±–ª—è',
        '–µ–±–∞–ª',
        '–µ–±—É',
        '–µ–±–∞–Ω–∞—Ç',
        '–µ–±–ª–∞–Ω',
        '—á—É—Ä–∫–∞',
        '—Å–ø–µ—Ä–º–∞',
        '—Ç—Ä–æ—Ö–æ—Ç—ã',
        '—Ç—Ä–∞—Ö–∞—Ç—å',
        '—Ç—Ä–∞—Ö–∞–≤',
        '—Ç—Ä–∞—Ö–Ω—É–≤',
        '—Å–æ—Å–∞–≤',
        '—Å–æ—Å–∞—Ç—å',
        '–ø–∏—Å—é–Ω',
        '—Ö—É–π',
        '–ø–∏—Å—å–∫–∞',
        '–ø—ç—Å—é–Ω',
        '–ª–æ—Ö–∞',
        '–ª–æ—Ö',
        '–∞—Ö—É–µ–Ω–Ω—ã–π,',
        '–∞—Ö—É–µ—Ç—å',
        '–∞—Ö—É–µ–ª',
        '–ø–æ—Ö—É–π',
        '–º–∞—Ç—å',
        '–¥–∏–Ω–∞—Ö—É',
        '–¥–∏ –Ω–∞—Ö—É',
        '–≥–∞–Ω–¥–æ–Ω',
        '–Ω–∏—Ö—É—è',
        '—Å—Ö—É—è–ª–∏',
        '–±–ª—è—Ç—å',
        '–±–ª—è—Ç',
        '–ê–ø–µ–∑–¥–∞–ª',
        '–ê–ø–µ–∑–¥–æ—à–µ–Ω–Ω–∞',
        '–ë–ª—è–¥—å',
        '–ë–ª—è–¥—Å—Ç–≤–æ',
        '–í—ã–µ–±–æ–Ω',
        '–í—ã–µ–±–∞—Ç—å',
        '–í—Ö—É—é–∂–∏—Ç—å',
        '–ì–æ–º–æ—Å–µ–∫',
        '–î–æ–ª–±–æ—ë–±',
        '–ï–±–ª–æ',
        '–ï–±–ª–∏—â–µ',
        '–ï–±–∞—Ç—å',
        '–ï–±–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞',
        '–ï–±—É–Ω–æ–∫',
        '–ï–±–ª–∞–Ω',
        '–Å–±–Ω—É—Ç—å',
        '–Å–±–æ–ª—ã–∑–Ω—É—Ç—å',
        '–ï–±–æ—à',
        '–ó–∞–µ–±–∞–ª',
        '–ó–∞–µ–±–∞—Ç—ã–π',
        '–ó–ª–∞–µ–±—É—á–∏–π',
        '–ó–∞—ë–±',
        '–ò–¥–∏ –Ω–∞ —Ö—É–π',
        '–ö–æ–ª–¥–æ–µ–±–∏–Ω–∞',
        '–ú–∞–Ω–¥–∞',
        '–ú–∞–Ω–¥–æ–≤–æ—à–∫–∞',
        '–ú–æ–∫—Ä–æ—â–µ–ª–∫–∞',
        '–ù–∞–µ–±–∫–∞',
        '–ù–∞–µ–±–∞–ª',
        '–ù–∞–µ–±–∞–ª–æ–≤–∫–∞',
        '–ù–∞–ø–∏–∑–¥–µ—Ç—å',
        '–û—Ç—ä–µ–±–∏—Å—å',
        '–û—Ö—É–µ—Ç—å',
        '–û—Ç—Ö—É–µ–≤–µ—Ä—Ç–∏—Ç—å',
        '–û–ø–∏–∑–¥–µ–Ω–µ—Ç—å',
        '–û—Ö—É–µ–≤—à–∏–π',
        '–û—Ç–µ–±—É–∫–∞—Ç—å',
        '–ü–∏–∑–¥–∞',
        '–ü–∏–¥–∞—Ä–∞—Å',
        '–ü–∏–∑–¥–∞—Ç—ã–π',
        '–ü–∏–∑–¥–µ—Ü',
        '–ü–∏–∑–¥–∞–Ω—É—Ç—ã–π',
        '–ü–æ–µ–±–∞—Ç—å',
        '–ü–æ–µ–±—É—Å—Ç–∏–∫–∞',
        '–ü—Ä–æ–µ–±–∞—Ç—å',
        '–ü–æ–¥–∑–∞–ª—É–ø–Ω—ã–π',
        '–ü–∏–∑–¥–µ–Ω—ã—à',
        '–ü—Ä–∏–ø–∏–∑–¥–∞–∫',
        '–†–∞–∑—ä–µ–±–∞—Ç—å',
        '–†–∞—Å–ø–∏–∑–¥—è–π',
        '–†–∞–∑—ä–µ–±–∞–Ω–Ω—ã–π',
        '–°—É–∫–∞',
        '–°—É—á–∫–∞',
        '–¢—Ä–∞—Ö–∞—Ç—å',
        '–£–µ–±–æ–∫',
        '–£–µ–±–∞—Ç—å',
        '–£–≥–æ–Ω–¥–æ—à–∏—Ç—å',
        '–£–µ–±–∞–Ω',
        '–•–∏—Ç—Ä–æ–≤—ã–µ–±–∞–Ω–Ω—ã–π',
        '–•—É–π',
        '–•—É–π–Ω—è',
        '–•—É–µ—Ç–∞',
        '–•—É–µ–≤–æ',
        '–•—É–µ—Å–æ—Å',
        '–•—É–µ—Ç—å',
        '–•—É–µ–≤–µ—Ä—Ç–∏—Ç—å',
        '–•—É–µ–≥–ª–æ—Ç',
        '–•—É–∏—Å—Ç–∏–∫–∞',
        '–ß–ª–µ–Ω–æ—Å–æ—Å',
        '–ß–ª–µ–Ω–æ–ø–ª–µ—Ç',
        '–®–ª—é—Ö–∞'
    ]
    if message.text:
        db_add_user.add_user_id(message.from_user.id, message.from_user.full_name)
        if message.chat.type != types.ChatType.PRIVATE:
            user_id = message.from_user.id
            db_words.add_or_update_user(user_id, message.from_user.first_name, message.chat.id)
            db_add_day.add_new_message(message.from_user.id, message.from_user.full_name, message.chat.id)
            for i in mat:
                if i.lower() in message.text.lower():
                    db_add_bad.add_or_update_user(message.from_user.id, message.from_user.full_name, message.chat.id)
                    db_bad_day.add_new_message(message.from_user.id, message.from_user.full_name, message.chat.id)


def register_client(dp: Dispatcher):
    dp.register_message_handler(config, is_admin=True, commands=['config'])
    dp.register_message_handler(danet, regexp=re.compile(r'^\.–¥–∞–Ω–µ—Ç'))
    dp.register_message_handler(who, lambda message: message.text.lower().startswith("–±–æ—Ç –∫—Ç–æ"))
    dp.register_message_handler(infa, lambda message: message.text.lower().startswith("–±–æ—Ç –∏–Ω—Ñ–∞"))
    dp.register_message_handler(say, lambda message: message.text.lower().startswith("–¥–æ–±—Ä—è–∫ —Å–∫–∞–∂–∏"))
    dp.register_message_handler(here, lambda message: message.text.lower().startswith(("–º–æ–≤–ø —Ç—ã —Ç—É—Ç–∞", "–º–æ–≤–ø —Ç—ã —Ç—É—Ç")))
    # dp.register_message_handler(profile, text=['.–ø—Ä–æ—Ñ–∏–ª—å'])
    dp.register_message_handler(start, commands=['start'])
    dp.register_message_handler(rules, commands=['rules'])
    dp.register_message_handler(delete, text=['.—É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞'])
    dp.register_message_handler(dobryak, text=['–¥–æ–±—Ä—è–∫', '–î–æ–±—Ä—è–∫', '–î–æ–ø—Ä–∏—è–∫', '–¥–æ–ø—Ä–∏–∫', "–ë–æ–π–±–∞–∫–∞", "–±–æ–π–±–∞–∫–∞"])
    dp.register_message_handler(bot, text=['–±–æ—Ç', '–ë–æ—Ç', '–ë–æ—Ç—ã–∫', '–±–æ—Ç–∏–∫', "–±–æ—Ç—ã–∫", "–ë–æ—Ç–∏–∫"])
    dp.register_message_handler(comand_list, commands=['commands'])
    dp.register_message_handler(song, text=['—ç–π –±—Ä–∞—Ç–æ—á–∏–∫ –ø–µ—Å–µ–Ω–∫—É —Å—ã–≥—Ä–∞–π –∫–∞'])
    dp.register_message_handler(top_boltunov, text=['–ë–æ–ª—Ç—É–Ω—ã', '–±–æ–ª—Ç—É–Ω—ã', '–¢–æ–ø', '—Ç–æ–ø'])
    dp.register_message_handler(top_group_day, text=['–ë–æ–ª—Ç—É–Ω—ã –¥–µ–Ω—å', '–±–æ–ª—Ç—É–Ω—ã –¥–µ–Ω—å', '–¢–æ–ø –¥–µ–Ω—å', '—Ç–æ–ø –¥–µ–Ω—å'])
    dp.register_message_handler(top_group_week, text=['–ë–æ–ª—Ç—É–Ω—ã –Ω–µ–¥–µ–ª—è', '–±–æ–ª—Ç—É–Ω—ã –Ω–µ–¥–µ–ª—è', '–¢–æ–ø –Ω–µ–¥–µ–ª—è', '—Ç–æ–ø –Ω–µ–¥–µ–ª—è'])
    dp.register_message_handler(top_group_month, text=['–ë–æ–ª—Ç—É–Ω—ã –º–µ—Å—è—Ü', '–±–æ–ª—Ç—É–Ω—ã –º–µ—Å—è—Ü', '–¢–æ–ø –º–µ—Å—è—Ü', '—Ç–æ–ø –º–µ—Å—è—Ü'])
    dp.register_message_handler(top_pizdabol, text=['–ø–∏–∑–¥–∞–±–æ–ª—ã', '–ü–∏–∑–¥–∞–±–æ–ª—ã', '–ë—ã–¥–ª–æ', '–±—ã–¥–ª–æ'])
    dp.register_message_handler(top_pizdabol_day, text=['–ü–∏–∑–¥–∞–±–æ–ª –¥–µ–Ω—å', '–ø–∏–∑–¥–∞–±–æ–ª –¥–µ–Ω—å', '–ë—ã–¥–ª–æ –¥–µ–Ω—å', '–±—ã–¥–ª–æ –¥–µ–Ω—å'])
    dp.register_message_handler(top_pizdabol_week,
                                text=['–ü–∏–∑–¥–∞–±–æ–ª –Ω–µ–¥–µ–ª—è', '–ø–∏–∑–¥–∞–±–æ–ª –Ω–µ–¥–µ–ª—è', '–±—ã–¥–ª–æ –Ω–µ–¥–µ–ª—è', '–ë—ã–¥–ª–æ –Ω–µ–¥–µ–ª—è'])
    dp.register_message_handler(top_pizdabol_month,
                                text=['–ü–∏–∑–¥–∞–±–æ–ª –º–µ—Å—è—Ü', '–ø–∏–∑–¥–∞–±–æ–ª –º–µ—Å—è—Ü', '–ë—ã–¥–ª–æ –º–µ—Å—è—Ü', '–±—ã–¥–ª–æ –º–µ—Å—è—Ü'])
    dp.register_message_handler(user_all)
