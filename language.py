words_setting = {  # —Ç—É—Ç —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ—à—å –≤—Å–µ —Ñ—Ä–∞–∑—ã —Å —Ñ–∞–π–ª–∞ settings –∏ –≤—Å—Ç–∞–≤–ª—è–Ω—à –≤ —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ
    "RU": [
        'üî• –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç',
        'üîé –µ—â–µ —Ñ—Ä–∞–∑–∞',
        ' –∏ —Ç—É—Ç —á–µ—Ç–æ –Ω–∞ —Ä—É—Å—Å',
        ' –∏ –∑–ª–¥–µ—Å—å',
        'üë§ –∏ –∫–∞—Ä–æ—á–µ –≤—Å–µ –Ω–∞ —Ä—É—Å—Å',
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞',
        '–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞',
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
    ],

    "EN": [  # –≤–æ—Ç —Ç—É—Ç —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã c settings –Ω–æ –Ω–∞ –∞–Ω–≥–ª —è–∑
        'üî• Top',
        'üîé Search',
        '‚Ñπ Information',
        'üåè Language',
        'üë§ My Profile',
        'Enter a track name',
        'Choose a platform to search for',
        'Choose language'
    ]
}

words_keyboard = {  # —Ç—É—Ç —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ—à—å –≤—Å–µ —Ñ—Ä–∞–∑—ã —Å —Ñ–∞–π–ª–∞ keyboard –∏ –≤—Å—Ç–∞–≤–ª—è–Ω—à –≤ —Å–ø–∏—Å–æ–∫ –Ω–∏–∂–µ
    "RU": [
        'üî• –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç',
        ' –Ω–∞–∑–∞–¥',
        ' –≤–ø–µ—Ä–µ–¥',
        ' —Ä–∞–∫–æ–º',
        'üë§ –±–æ–∫–æ–º',
        ' –∏ —Ç–¥',
        '–í—ã–±–µ—Ä–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞',
        '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
    ],

    "EN": [  # –≤–æ—Ç —Ç—É—Ç —Ç–µ –∂–µ —Ñ—Ä–∞–∑—ã c keyboard –Ω–æ –Ω–∞ –∞–Ω–≥–ª —è–∑
        'üî• Top',
        'üîé Search',
        '‚Ñπ Information',
        'üåè Language',
        'üë§ My Profile',
        'Enter a track name',
        'Choose a platform to search for',
        'Choose language'
    ]
}
''' –ò –í–û–¢ –¢–ê–ö –°–û–ó–î–ê–ï–®–¨ –°–õ–û–í–ê–†–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –§–ê–ô–õ–ê –ò –í –ö–ê–ñ–î–û–ú –¢–ê–ö–û–ú –°–õ–û–í–ê–†–ï –ë–£–î–£–¢ –§–†–ê–ó–´ –° –ö–ê–ö–û–ì–û–¢–û –§–ê–ô–õ–ê'''
'''–ê –ü–û–¢–û–ú –Ø –ü–†–û–°–¢–û –ë–£–î–£ –û–¢–ë–†–ê–©–ê–¢–¨–°–Ø –ö –°–õ–û–í–ê–†–Æ –ü–û –Ø–ó–´–ö–£ –ò –ë–£–î–£ –î–û–°–¢–ê–í–ê–¢–¨ –§–†–ê–ó–´'''

# async def profile(message: types.Message):
#     user_id, name, time = db_add_user.get_random_user_with_name_from_table()
#     telegram_user_id = message.from_user.id
#     user_profile_photos = await bot.get_user_profile_photos(user_id=telegram_user_id)
#
#     if user_profile_photos.total_count > 0:
#         photo = user_profile_photos.photos[0][-1]
#         file_id = photo.file_id
#
#         await bot.send_photo(message.chat.id, photo=file_id,
#                         caption=f"–ü—Ä–æ—Ñ–∏–∏–ª—å <a href='tg://user?id={telegram_user_id}'>{message.from_user.full_name}</a>\n"
#                          f"–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ {time[:10]}"
#                          f"–°—Ç–∞—Ç—å: {}", parse_mode='HTML')


import datetime
import sqlite3
import time







# class Database_language:
#     def __init__(self, db_file):
#         self.conn = sqlite3.connect(db_file)
#         self.cur = self.conn.cursor()
#         self.create_table()
#
#     def create_table(self):
#         with self.conn:
#             self.cur.execute("""
#             CREATE TABLE IF NOT EXISTS language (
#                        user_id INTEGER,
#                        lang TEXT
#                        )
#                """)
#
#     def add_user_lang(self, user_id, lang):
#         with self.conn:
#             self.cur.execute("INSERT INTO language VALUES (?, ?)", (user_id, lang))


# class Database_add_admin:
#     def __init__(self, db_file):
#         self.conn = sqlite3.connect(db_file)
#         self.cur = self.conn.cursor()
#         self.user_admin()
#
#     def user_admin(self):
#         with self.conn:
#             self.cur.execute("""
#                         CREATE TABLE IF NOT EXISTS user_admin (
#                             id INTEGER PRIMARY KEY AUTOINCREMENT,
#                             user_id INTEGER UNIQUE,
#                             name TEXT
#                         )
#                     """)
#
#     def user_admin_exists(self, user_id):
#         with self.conn:
#             result = self.cur.execute("SELECT * FROM user_admin WHERE user_id = ?", (user_id,)).fetchall()
#             return bool(len(result))
#
#     def add_admin_user(self, user_id, full_name):
#         if not self.user_admin_exists(user_id):
#             with self.conn:
#                 self.cur.execute("INSERT INTO user_admin (user_id, name) VALUES (?, ?)", (user_id, full_name,))
#                 self.conn.commit()
#
#     def staff(self):
#         with self.conn:
#             res_adm = self.cur.execute("SELECT name FROM user_admin").fetchall()
#             return [name[0] for name in res_adm]
#
#     def is_admin(self, user_id_or_username):
#         with self.conn:
#             result = self.cur.execute("SELECT * FROM user_admin WHERE user_id = ? OR name = ?",
#                                       (user_id_or_username, user_id_or_username)).fetchall()
#             return bool(len(result))
#
#     def remove_admin(self, user_id_or_username):
#         with self.conn:
#             self.cur.execute("DELETE FROM user_admin WHERE user_id = ? OR name = ?",
#                              (user_id_or_username, user_id_or_username))
#             self.conn.commit()
#
